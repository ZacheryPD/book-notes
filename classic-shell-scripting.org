#+TITLE: Classic Shell Scripting

* Housekeeping

** What is this project?

   This project is my attempt to document my notes as I read through the book
   Classic Shell Scripting. This book attempts to guide the reader through
   common shell scripting tasks in Bash. I thought the examples (and some of my
   own prototypes) would be good candidates for literate programming.

** Literate programming

   Literate programming is a technique where you invert the priority of code
   and comments, writing primarily documentation explaining your thought
   process with code examples interspersed which can be combined in some way to
   produce the actual code you want. Org mode has some ability to do that
   native and I am going to use that functionality. 

   For example, if I add a script below:
   #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/preface.sh
     echo "Hello, world!"
     echo "Literate programming is very interesting."
   #+END_SRC

   It can be executed in Spacemacs with ~<SPC> m b e~! In particular, that
   block generates this when run:
    
   #+BEGIN_EXAMPLE
   #+RESULTS:
   | Hello,   | world!      |    |      |              |
   | Literate | programming | is | very | interesting. |
   #+END_EXAMPLE

* Chapter 1

  This chapter is primarily a history lesson and doesn't contain many useful
  code examples. Very interesting, but not useful for this reference.
   
* Chapter 2

** Who

   The who command prints out information about the currently logged in
   user(s)! On a shared machine, I'd expect this to return many users

   #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_who.sh
     who
   #+END_SRC

   #+RESULTS:
   : zacherydelong :1           2021-05-21 08:59 (:1)

   Even more useful, though, is a way to count the users logged into the
   system. Since ~who~ outputs one user per line, if we counted the number of
   lines, we could easily see how many users there are. The Unix program ~wc~
   can do many things, but when used with ~-l~ will only output the number of
   lines.

   To move the output of ~who~ into the input of ~wc -l~ we use a Unix pipe
   (~|~). 

   #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_count_logged_in_users.sh
     who | wc -l
   #+END_SRC

   #+RESULTS:
   : 1

** Making scripts run-able

   There is one more step in making files executable, and that's telling the
   interpreter how to run them. You can do this with a special metadata comment
   ~#!~. This comment (when followed by the path to a particular shell) will
   ensure that the correct shell runs your scripts. For most of my scripts I
   will use ~/bin/sh~ which is the path on my Linux systems to zsh, my
   preferred shell.

   It's worth noting that the system will usually have a default, so often you
   can get away without that line. That being said, it's a good best practice.
   Also, you can do all kinds of things this way. For example, you could make
   an ~awk~ shell script this way or even run python or some other shell
   scripting language.

** Variables

   Variables at the shell can start with an underscore (_) or a letter. They
   may not contain symbols.

   If you want to create and assign a new variable, you can follow the name
   with an equal sign. To print that variable, use echo and precede the name
   with a ~$~.

   #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_variables.sh
     my_number=4

     echo $my_number
   #+END_SRC

   #+RESULTS:
   : 4

   You can assign strings with or without quotes, but if the value has to
   contain spaces, you must use quotes.

   #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_variables.sh
     my_string_without_spaces=hello

     my_greeting_with_spaces="hello, world!"

     echo $my_string_without_spaces
     echo $my_greeting_with_spaces
   #+END_SRC

   #+RESULTS:
   | hello |        |
   | hello | world! |

   There is also some basic string interpolation across strings, which is
   pretty neat in such an old language.

   #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_variables.sh
     first_name=Zachery
     middle_name=Paul
     last_name=DeLong

     full_name="$last_name, $first_name $middle_name"

     echo $full_name
   #+END_SRC

   #+RESULTS:
   | DeLong | Zachery Paul |

*** A note about echo

    One cool thing about ~echo~ is the ~-n~ option that can stop echo from
    printing a newline. This is handy for taking input on the same line as the
    prompt, but not all systems support it. Fortunately, PopOS (my current
    operating system) does package a version of ~echo~ that has it!

*** printf

    In part because of the lack of standardization mentioned above, it's
    usually a good idea to use the ~printf~ command when your output is more
    complex. In the simplest case, it's pretty easy to use.

    #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_variables.sh
      printf "Hello, world, from printf!\n"
    #+END_SRC

    Note the manually added newline! The real power of ~printf~ comes from
    formatting strings.

    #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_variables.sh
      printf "%s, %s" hello world
    #+END_SRC

    #+RESULTS:
    | hello | world |

     
** I/O Redirection

   You already know what standard input/output/error are, and redirection is
   how you get programs to use things other than the standard terminal to
   handle those things. You can use ~<~ to change standard input, and you can
   use ~>~ to change standard output.

   Normally echo works on standard output (the terminal) but you can redirect
   it to a file.
   #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_io_redirection.sh
     echo "This is interesting" > output.txt

     cat output.txt

     rm output.txt 
   #+END_SRC

   #+RESULTS:
   : This is interesting

   Note that writing to a file with output redirection (~>~) will overwrite the
   file if it exists. To append instead, use ~>>~.

** Pipelines (pipes)

   When working with output your have two options in most cases.
   + Write your output to a temporary file and read it in the next program
   + Pipe the output of one program as input to another program

   In general, pipes are much faster than file operations, so they should often
   be preferred (depending on context of course). We have already used an
   example of pipes in one of our first programs [[*Who][our user count]]!

    
** TR

   The TR command can be used to do transliteration. It takes a list of
   characters to operate on and an input.

   #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_tr.sh
     file_name="file.txt"

     echo "this will be upper cased" > $file_name

     cat $file_name

     # Notice the quotes! Apparently this version requires them
     cat $file_name | tr "[:lower:]" "[:upper:]"

     rm $file_name
   #+END_SRC

   #+RESULTS:
   | this | will | be | upper | cased |
   | THIS | WILL | BE | UPPER | CASED |

   You can also use it to delete characters

   #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_tr.sh
     file_name="file.txt"

     echo "thibs habbbbs abbbb lbot of jbbbunk in ibbbt." > $file_name

     cat $file_name
     cat $file_name | tr -d "b"

     rm $file_name
   #+END_SRC

   #+RESULTS:
   | thibs | habbbbs | abbbb | lbot | of | jbbbunk | in | ibbbt. |
   | this  | has     | a     | lot  | of | junk    | in | it.    |


   It can do a lot of other neat stuff, too.

** Turning off output

   It can be useful (especially when asking for passwords) to turn off
   repeating what the user types in the terminal. To do that, run ~stty -echo~
   and to turn it back on again ~stty echo~

   This can be particularly useful when combined with ~read~.

** Script arguments

   You can get to shell script parameters using ~$number~ and if you need to go
   above 9, you have to surround the number in curly braces.

   #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_args.sh
     echo "Arg 1 is $1"
     echo "Arg 11 is ${11}"
   #+END_SRC
    
** Grep
    
   Grep parses input for lines that match a specific pattern
    
*** Looking for a particular user

    If you wanted to use a script to find a specific logged in user on your
    machine, you could write something like

    #+BEGIN_SRC shell :mkdirp yes :tangle classic-shell-scripting/chapter2_grep.sh
      who | grep $1
    #+END_SRC

** Execution tracing

   To debug, you can use ~sh -x [script]~ You can also use ~set -x~ and ~set
   +x~ to turn tracing on and off (respectively) within a script.

* Chapter 3

** Quotes in bash
   
   Quick aside about quotes in zsh... You can't embed a single quote inside a
   quoted text. Even escaping it doesn't work for some (I'm sure legacy) reason.
   So in order to get a single quote inside the character set here, I have to
   end the single quote text ~'~ , input an escaped single quote ~\'~ and then
   put a new single quote to continue the string ~'~. So put together, it's
   ~'\''~. This makes no sense, but it is what it is.

   Thankfully, the same is not true of double quotes. Notice in the following
   example that the ~echo~ line is using double quotes and escaping the internal
   double quotes, but the regular expression (which is looking for items that
   have a single or double quote in the line) is doing this crazy single-quote
   escaping.
   
   #+BEGIN_SRC shell :mkdirp yes
     echo "'foo'\nbar\n\"asdf\"" | grep '\(['\''"]\)' 
   #+END_SRC

   #+RESULTS:
   | 'foo' |
   | asdf  |

** Backreferences
    
   A backreference is a way to refer to something in a previous capture group
   in your pattern. For example, if I wanted to match lines that contained
   words (or groups of words) enclosed in either a double or a single quote, I
   would do something like this:

   #+BEGIN_SRC shell :mkdirp yes
     echo "'foo'\nbar\n\"asdf\"\n'one\n\"two'" | grep "\(['\"]\).\+\1"
   #+END_SRC

   #+RESULTS:
   | 'foo' |
   | asdf  |

   Notice that the first step is to match either a single or double quote in the
   first capture group. Then, we match any string of characters (including
   whitespace) of at least one or more, followed by "whatever was matched in the
   first capture group."

   Notice that it isn't "whatever capture class was in that group." If we had
   matched on ~[:alpha:]~ text substituted for ~\1~ would have been the _exact
   text_ from the previous capture group, *not* the character class. This is why
   the text does not match a line that starts with a single quote and ends with
   a double quote, for example.

** Matching many characters at once

   So far, we have mostly used ~.~ and ~\+~ or ~*~ to match multiple
   characters, but there are tons of ways to match more specifically.

*** BREs

    BREs have a rather odd syntax for matching specific classes.

    #+BEGIN_SRC shell :mkdirp yes 
      echo "lowercase text\nUPPERCASE TEXT" | grep "[[:upper:]]"
    #+END_SRC

    #+RESULTS:
    : UPPERCASE TEXT

    There are other classes for:
    - lower
    - digit
    - and many others!

    That said, the most interesting things that you can do with regular
    expressions is match more than just a single character in that class.
    Usually, I'll do this using either ~*~ (match zero or more) or ~\+~ (match
    one or more).
     
*** ERE

    EREs have the more modern (Perl style?) syntax for equivalence classes.
    some of my favorites are:

    - ~\d~ :: Matches digits
    - ~\s~ :: Matches whitespace
    - ~\w~ :: Matches "word" characters

    And many of these can be capitalized to mean "Not x" so ~\S~ means "non
    whitespace".
     
    Matching repeating characters/classes works similarly to BREs: ~*~ still
    matches "zero or more" but ~+~ matches "one or more" (no backslash).
     
*** Intervals

    Intervals give a way to match a specific number of characters. Think of it
    like ~*~ but with more flexibility. For example:
     
    #+BEGIN_SRC shell :mkdirp yes
      echo "AAAB" | grep -G "A\{3\}B"    # Match 3 A's and a B
      echo "AAAB" | grep -G "A\{3,\}B"   # Match at least 3 A's (but possibly more) and a B
      echo "AAAB" | grep -G "A\{2,4\}B" # Match betwen 2 and 3 A's and a B
    #+END_SRC

    #+RESULTS:
    | AAAB |
    | AAAB |
    | AAAB |

    If you want to use an ERE, just drop the backslashes. Note the lack of a
    space after the comma.

*** Notes

    Unfortunately, ~+~ and ~?~ are ERE only.

*** Word matching

    This isn't part of the standard, but most Unix programs will treat ~\<~ and
    ~\>~ as word boundaries.

    #+BEGIN_SRC shell :mkdirp yes
      echo "This is a test" | grep "\<is\>" # Should match only "is"
      echo "This is a test" | grep "is\>"   # Should match both "is" and "this"
    #+END_SRC

    #+RESULTS:
    | This | is | a | test |
    | This | is | a | test |

** Sed

   Sed is a simple program to do text substitution using regular expressions. I
   have used this before, so I am not going to go into every example.

*** & 

    One interesting thing about sed is that in a substitution expression, you
    can represent "the entire matched expression" for ~&~. So if I wanted to
    replace all instances of my name with a note explaining my nickname, I could
    do something like this.

    #+BEGIN_SRC shell :mkdirp yes  
      sed -e s/Zach/& (Hipster)/g file.txt
    #+END_SRC
    
    If you really wanted an & character, just use ~\&~.
    
    
*** n-th replace

    If you really want to do something weird, you can replace only the n-th
    instance of an expression on a line by replacing ~g~ with ~n~.

    #+BEGIN_SRC shell :mkdirp yes
      sed -e s/Zach/& (Hipster)/3 file.txt
    #+END_SRC

    
*** Multiple substitutions

    If you want to run multiple substitutions, you can provide multiple ~-e~
    options with separate expressions to be run one after the other.

    That said, if you have many edits, just use a script file with the ~-f~
    option.

    Also, (but don't do this) you can actually separate multiple expressions in
    the same ~-e~ using a semicolon.

*** Do it again...

    Sed will actually store the "previous matching expression" for use later, so
    if you want to run the same thing multiple times (such as when taking
    multiple passes over something) you can just put a blank expression!

*** ~-n~

    The ~-n~ option prevents sed from printing when it matches something. This
    sounds not super useful, but there is also the ~p~ command. Unlike the ~s~
    command that we have been using so far, ~p~ goes at the /end/ of a command,
    and it tells sed to print something.

    #+begin_src shell :mkdirp yes
      echo "things\nfoo\nwhat\nbar\n stuff"  | sed -n /foo/,/bar/p
    #+end_src

    #+RESULTS:
    | foo  |
    | what |
    | bar  |

*** Ranges

    If you prefix a command with certain special things, you can also control
    the line(s) that something executes on. In the previous examples, the
    expressions separated by commas were in effect saying "perform something
    only on lines between the words "foo" and "bar".

*** Negation
  
    You can use ~!~ to mean "not" in a range. So the following expression prints
    only lines that do not start with "used".
    
    #+begin_src shell :mkdirp yes
      echo "new: origin of species\nused: bible\nnew: history of the world\nused: Hitchikers Guide to the Galaxy" | sed -n /^used/!p
    #+end_src

    #+RESULTS:
    | new: | origin  | of | species |       |
    | new: | history | of | the     | world |

** Cut

   Fields are just pieces of data separated by some delimiter. The most obvious
   delimiter is a single space, but then your data couldn't contain spaces. Tab,
   colon, and comma are all other common separators for fields. It's pretty
   common in config files (such as /etc/passwd) to see colon.

   ~cut~ can be used to extract a field from a given row.

   #+begin_src shell :mkdirp yes
     cut -d : -f 1,5 /etc/passwd
   #+end_src

   #+RESULTS:
   | root:root                 |               |                    |            |
   | daemon:daemon             |               |                    |            |
   | bin:bin                   |               |                    |            |
   | sys:sys                   |               |                    |            |
   | sync:sync                 |               |                    |            |
   | games:games               |               |                    |            |
   | man:man                   |               |                    |            |
   | lp:lp                     |               |                    |            |
   | mail:mail                 |               |                    |            |
   | news:news                 |               |                    |            |
   | uucp:uucp                 |               |                    |            |
   | proxy:proxy               |               |                    |            |
   | www-data:www-data         |               |                    |            |
   | backup:backup             |               |                    |            |
   | list:Mailing              | List          | Manager            |            |
   | irc:ircd                  |               |                    |            |
   | gnats:Gnats               | Bug-Reporting | System             | (admin)    |
   | nobody:nobody             |               |                    |            |
   | systemd-timesync:systemd  | Time          | Synchronization,,, |            |
   | systemd-network:systemd   | Network       | Management,,,      |            |
   | systemd-resolve:systemd   | Resolver,,,   |                    |            |
   | messagebus:               |               |                    |            |
   | syslog:                   |               |                    |            |
   | _apt:                     |               |                    |            |
   | geoclue:                  |               |                    |            |
   | colord:colord             | colour        | management         | daemon,,,  |
   | gnome-initial-setup:      |               |                    |            |
   | speech-dispatcher:Speech  | Dispatcher,,, |                    |            |
   | gdm:Gnome                 | Display       | Manager            |            |
   | avahi-autoipd:Avahi       | autoip        | daemon,,,          |            |
   | avahi:Avahi               | mDNS          | daemon,,,          |            |
   | tss:TPM                   | software      | stack,,,           |            |
   | pulse:PulseAudio          | daemon,,,     |                    |            |
   | rtkit:RealtimeKit,,,      |               |                    |            |
   | usbmux:usbmux             | daemon,,,     |                    |            |
   | _flatpak:Flatpak          | system-wide   | installation       | helper,,,  |
   | cups-pk-helper:user       | for           | cups-pk-helper     | service,,, |
   | saned:                    |               |                    |            |
   | dnsmasq:dnsmasq,,,        |               |                    |            |
   | tcpdump:                  |               |                    |            |
   | uuidd:                    |               |                    |            |
   | systemd-coredump:systemd  | Core          | Dumper             |            |
   | zacherydelong:Zachery     | DeLong,,,     |                    |            |
   | nm-openvpn:NetworkManager | OpenVPN,,,    |                    |            |

   #+begin_src shell :mkdirp yes
     cut -d : -f 1,6 /etc/passwd
   #+end_src

   #+RESULTS:
   | root:/root                                    |
   | daemon:/usr/sbin                              |
   | bin:/bin                                      |
   | sys:/dev                                      |
   | sync:/bin                                     |
   | games:/usr/games                              |
   | man:/var/cache/man                            |
   | lp:/var/spool/lpd                             |
   | mail:/var/mail                                |
   | news:/var/spool/news                          |
   | uucp:/var/spool/uucp                          |
   | proxy:/bin                                    |
   | www-data:/var/www                             |
   | backup:/var/backups                           |
   | list:/var/list                                |
   | irc:/run/ircd                                 |
   | gnats:/var/lib/gnats                          |
   | nobody:/nonexistent                           |
   | systemd-timesync:/run/systemd                 |
   | systemd-network:/run/systemd                  |
   | systemd-resolve:/run/systemd                  |
   | messagebus:/nonexistent                       |
   | syslog:/home/syslog                           |
   | _apt:/nonexistent                             |
   | geoclue:/var/lib/geoclue                      |
   | colord:/var/lib/colord                        |
   | gnome-initial-setup:/run/gnome-initial-setup/ |
   | speech-dispatcher:/run/speech-dispatcher      |
   | gdm:/var/lib/gdm3                             |
   | avahi-autoipd:/var/lib/avahi-autoipd          |
   | avahi:/run/avahi-daemon                       |
   | tss:/var/lib/tpm                              |
   | pulse:/var/run/pulse                          |
   | rtkit:/proc                                   |
   | usbmux:/var/lib/usbmux                        |
   | _flatpak:/nonexistent                         |
   | cups-pk-helper:/home/cups-pk-helper           |
   | saned:/var/lib/saned                          |
   | dnsmasq:/var/lib/misc                         |
   | tcpdump:/nonexistent                          |
   | uuidd:/run/uuidd                              |
   | systemd-coredump:/                            |
   | zacherydelong:/home/zacherydelong             |
   | nm-openvpn:/var/lib/openvpn/chroot            |

** Join

  
   #+begin_src shell :mkdirp yes
     # Create some TMP files
     
     echo "# Sales data" > sales
     echo "# salesperson\tamout" >> sales
     echo "joe\t100" >> sales
     echo "jane\t200" >> sales
     echo "herman\t140" >> sales
     echo "chris\t300" >> sales
     
     echo "# Quotas " > quota
     echo "# person\tamout" >> quota
     echo "joe\t50" >> quota
     echo "jane\t75" >> quota
     echo "herman\t80" >> quota
     echo "chris\t95" >> quota
     
     # Remove comments & sort
     sed '/^#/d' quota | sort > quota.sorted
     sed '/^#/d' sales | sort > sales.sorted
     
     join quota.sorted sales.sorted
     
     rm quota.sorted sales.sorted quota sales
   #+end_src

   #+RESULTS:
   | chris  | 95 | 300 |
   | herman | 80 | 140 |
   | jane   | 75 | 200 |
   | joe    | 50 | 100 |

** Awk

   Awk is a whole scripting language of its own, but you can use it to access
   fields very easily using the syntax ~$numbr~. So to get the home directory
   out of /etc/passwd you would use something like:
   
  
   #+begin_src shell :mkdirp yes
     awk -F: '{print $6}' /etc/passwd
   #+end_src

   #+RESULTS:
   | /root                     |
   | /usr/sbin                 |
   | /bin                      |
   | /dev                      |
   | /bin                      |
   | /usr/games                |
   | /var/cache/man            |
   | /var/spool/lpd            |
   | /var/mail                 |
   | /var/spool/news           |
   | /var/spool/uucp           |
   | /bin                      |
   | /var/www                  |
   | /var/backups              |
   | /var/list                 |
   | /run/ircd                 |
   | /var/lib/gnats            |
   | /nonexistent              |
   | /run/systemd              |
   | /run/systemd              |
   | /run/systemd              |
   | /nonexistent              |
   | /home/syslog              |
   | /nonexistent              |
   | /var/lib/geoclue          |
   | /var/lib/colord           |
   | /run/gnome-initial-setup/ |
   | /run/speech-dispatcher    |
   | /var/lib/gdm3             |
   | /var/lib/avahi-autoipd    |
   | /run/avahi-daemon         |
   | /var/lib/tpm              |
   | /var/run/pulse            |
   | /proc                     |
   | /var/lib/usbmux           |
   | /nonexistent              |
   | /home/cups-pk-helper      |
   | /var/lib/saned            |
   | /var/lib/misc             |
   | /nonexistent              |
   | /run/uuidd                |
   | /home/zacherydelong       |
   | /var/lib/openvpn/chroot   |

   Note the usage of the ~-F~ option. It is setting the file separator variable.
   You could just set that shell variable, though it's probably cleaner to do it
   this way.

   You can also set the output field separator, but you have to use the ~-v~
   option which is a bit clumsy.

  
   #+begin_src shell :mkdirp yes
     awk -F: -v 'OFS=\t' '{ print $1, $6 }'  /etc/passwd
   #+end_src

   #+RESULTS:
   | root                | /root                     |
   | daemon              | /usr/sbin                 |
   | bin                 | /bin                      |
   | sys                 | /dev                      |
   | sync                | /bin                      |
   | games               | /usr/games                |
   | man                 | /var/cache/man            |
   | lp                  | /var/spool/lpd            |
   | mail                | /var/mail                 |
   | news                | /var/spool/news           |
   | uucp                | /var/spool/uucp           |
   | proxy               | /bin                      |
   | www-data            | /var/www                  |
   | backup              | /var/backups              |
   | list                | /var/list                 |
   | irc                 | /run/ircd                 |
   | gnats               | /var/lib/gnats            |
   | nobody              | /nonexistent              |
   | systemd-timesync    | /run/systemd              |
   | systemd-network     | /run/systemd              |
   | systemd-resolve     | /run/systemd              |
   | messagebus          | /nonexistent              |
   | syslog              | /home/syslog              |
   | _apt                | /nonexistent              |
   | geoclue             | /var/lib/geoclue          |
   | colord              | /var/lib/colord           |
   | gnome-initial-setup | /run/gnome-initial-setup/ |
   | speech-dispatcher   | /run/speech-dispatcher    |
   | gdm                 | /var/lib/gdm3             |
   | avahi-autoipd       | /var/lib/avahi-autoipd    |
   | avahi               | /run/avahi-daemon         |
   | tss                 | /var/lib/tpm              |
   | pulse               | /var/run/pulse            |
   | rtkit               | /proc                     |
   | usbmux              | /var/lib/usbmux           |
   | _flatpak            | /nonexistent              |
   | cups-pk-helper      | /home/cups-pk-helper      |
   | saned               | /var/lib/saned            |
   | dnsmasq             | /var/lib/misc             |
   | tcpdump             | /nonexistent              |
   | uuidd               | /run/uuidd                |
   | systemd-coredump    | /                         |
   | zacherydelong       | /home/zacherydelong       |
   | nm-openvpn          | /var/lib/openvpn/chroot   |

   There are various magic variables that ~awk~ can understand. The most common
   one is ~NF~ which represents the "number of fields". On most machines you can
   print it using ~$NF~ but for whatever reason, PopOS wants just ~NF~ as in
   this example.

    #+begin_src shell :mkdirp yes
      awk -F: -v 'OFS=\t' '{ print "# Fields: " NF }'  /etc/passwd
    #+end_src

    #+RESULTS:
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |
    | Fields: | 7 |

    You can also use a C-style ~printf~

    #+begin_src shell :mkdirp yes
      awk -F: '{ printf "Number of Fields is %d\n", NF}' /etc/passwd
    #+end_src

    #+RESULTS:
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |
    | Number | of | Fields | is | 7 |

    It's worth noting, too, that you can have ranges before any of the commands
    to limit to a certain pattern or number of lines.

    Furthermore, if you have initialization and teardown steps, you can add
    lines like:
    
    #+begin_src shell :mkdirp yes
      BEGIN { initialization }
      END { tear down }
    #+end_src

    This is more useful with awk script files, though. You can put the ~BEGIN~
    and ~END~ code anywhere, but you should put it at the actual beginning and
    end of the script.

* Chapter 4

** Sort

   Given field-separated input, sort it in some order by some keys.

   + -b :: Ignore leading whitespace
   + -c :: Check if input is srted
   + -d :: Dictionary sort order only considers alphanumeric and whitespace
   + -g :: General numeric value, compare as floats
   + -f :: Fold letters (effectively makes the sort case insensitive)
   + -i :: Ignores nonprintable characters
   + -k :: Specify the sort key field
   + -m :: Merge already sorted input files into an output stream [fn:1]
   + -n :: compare fields as integer numers
   + -o outfile :: Write to a file instead of stdout
   + -r :: reverse sort order
   + -t char :: set field separator to a single char
   + -u :: Unique fields only discard all but the first encountered value for
     each value

  #+begin_src shell :mkdirp yes
    echo "Zach:1\nJake:3\nZim:2\nFred:5\nTaryn:10" > names.unordered
    
    sort -t: -k1 names.unordered
    echo ""
    sort -t: -k2n names.unordered
    
    rm names.unordered
  #+end_src

  #+RESULTS:
  | Fred:5   |
  | Jake:3   |
  | Taryn:10 |
  | Zach:1   |
  | Zim:2    |
  |          |
  | Zach:1   |
  | Zim:2    |
  | Jake:3   |
  | Fred:5   |
  | Taryn:10 |

  Sorting is pretty dependent on your locale, which you can customize.

  You can also filter only to unique records using ~-u~.

  Note! Posix doesn't mandate that sort be stable (meaning two inputs that are
  equal are preserved in the same order.) If you need stability and are using
  GNU Sort, use the ~-stable~ option.
  
** gsub

   In awk, you can use the gsub function to make a "global substitution" in the
   form ~awk '{ gsub("ReplaceWith", "ReplaceThis"); print }'~. This can be
   really useful when processing large chunks of input.
   
** uniq

   Uniq (unsurprisingly) removes duplicate items. you can use ~-d~ to show only
   duplicate options. You can also use ~-c~ to count the groups.

** fmt

   fmt is not well standardized across systems, but it can be used to reformat
   text. It has two main options:

   + ~-s~ :: "split" long lines but do not join short ones
   + -w :: forces to some # of characters per line
    
     #+begin_src shell :mkdirp yes
       sed -n -e 9995,10004p /etc/dictionaries-common/words | fmt -w 50
     #+end_src

     #+RESULTS:
     | Lafayette    | Lafayette's | Lafitte  | Lafitte's  |            |
     | Lagos        | Lagos's     | Lagrange | Lagrange's | Lagrangian |
     | Lagrangian's |             |          |            |            |

** wc

   We have already encountered [[https://support.system76.com/articles/desktop-environment][wc once before]] but it has a few options we
   haven't used.

   + -c :: count characters only
   + -m :: count multibyte characters
     
  #+begin_src shell :mkdirp yes
    printf "counting characters" -n | wc -c
    printf "counting characters" -n | wc -m
  #+end_src

  #+RESULTS:
  | 19 |
  | 19 |
  
  #+begin_src shell :mkdirp yes
    printf '\xE2\x98\xA0' -n | wc -c
    printf '\xE2\x98\xA0' -n | wc -m
  #+end_src

  #+RESULTS:
  | 3 |
  | 1 |
  
* Chapter 5

  The goal of this chapter is to show how pipes work, so we will build a script
  to create an office directory from the /etc/passwd file. Before we get too far
  into that, we should set the shell to execute and document our script a little
  bit. Notice the use of the term "filter". That just means it takes its input
  from stdin and writes to stdout.
  
  #+begin_src shell :mkdirp yes :tangle classic-shell-scripting/passwd-to-directory
    #! /bin/sh
    #
    # Filter input (intended for /etc/passwd), outputs an office directory from
    # input
    #
    # Usage:
    #  passwd-to-directory < /etc/passwd > office-directory-file
  #+end_src

  We can assume that all the information we are processing in this program is
  public, but that isn't a safe assumption in general, so we will set ~umask~ to
  limit what can read/write to files that the program generates.

  #+begin_src shell :mkdirp yes :tangle classic-shell-scripting/passwd-to-directory
    umask 077
  #+end_src

  We also need some temporary files, and to make sure they get cleaned up
  eventually, we should put them in ~/tmp~. It's also a good idea to make sure
  there is something unique to each process in the names so that we can run
  multiple instances of the program at once without conflicting. To that end, we
  can use the magic variable ~$$~ (process number) in the names!

  #+begin_src shell :mkdirp yes :tangle classic-shell-scripting/passwd-to-directory
    PERSON=/tmp/pd.key.person.$$
    OFFICE=/tmp/pd.key.office.$$
    TELEPHONE=/tmp/pd.key.telephone.$$
    USER=/tmp/pd.key.user.$$
  #+end_src

  The first step is to grab columns 1 and 5 from the input and map them to the
  user file. I added in the sed line because my operating system (PopOS! 21.04)
  appears to be adding a csv set to the username field, but there isn't anything
  in the csv but the name, so I can just discard it.

  #+begin_src shell :mkdirp yes :tangle classic-shell-scripting/passwd-to-directory
    awk -F: '{ print $1 ":" $5 }' | sed "s/,//g" > $USER
  #+end_src

  Since this script is assuming that there is extra data in the 5th field (my
  distro doesn't actually have that data) this next step seems a bit silly and
  could be left off or written differently in a different system.

  #+begin_src shell :mkdirp yes :tangle classic-shell-scripting/passwd-to-directory
    sed -e 's=/.*= =' \
        -e 's=^\([^:]*\):\(.*\) \([^ ]*\)1 =\1:\3, \2=' < $USER | sort > $PERSON
    
    cat $PERSON
  #+end_src

  Notice a couple of clever things

  + The usage of ~[^:]:~ to match anything up to a colon
  + the usage of ~\~ to break a command into multiple lines
  + The usage of multiple ~-e~ which are performed in order
  + The usage of ~=~ as the separator instead of the standard ~/~
  
  We can also use the "trap" command to ensure that the files will be totally
  deleted when the program exits.

  Next up, we need to make the "office" file.

  #+begin_src shell :mkdirp yes :tangle classic-shell-scripting/passwd-to-directory
    sed -e 's=^\([^:]*\):[^/]*/\([^/]*\)/.*$=\1:\2=' < $USER | sort > $OFFICE
    
    cat $OFFICE
  #+end_src

  #+begin_src shell :mkdirp yes :tangle classic-shell-scripting/passwd-to-directory
    trap "exit 1" HUP INT PIPE QUIT TERM
    trap "rm -f $PERSON $OFFICE $TELEPHONE $USER" EXIT
  #+end_src

* Footnotes

[fn:1] Not sure why you'd use this over something like awk or join
