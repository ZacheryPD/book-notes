* Classic Shell Scripting

** Housekeeping

*** What is this project?

    This project is my attempt to document my notes as I read through the book
    Classic Shell Scripting. This book attempts to guide the reader through
    common shell scripting tasks in Bash. I thought the examples (and some of my
    own prototypes) would be good candidates for literate programming.

*** Literate programming

    Literate programming is a technique where you invert the priority of code
    and comments, writing primarily documentation explaining your thought
    process with code examples interspersed which can be combined in some way to
    produce the actual code you want. Org mode has some ability to do that
    native and I am going to use that functionality. 

    For example, if I add a script below:
    #+BEGIN_SRC shell :tangle preface.sh
      echo "Hello, world!"
      echo "Literate programming is very interesting."
    #+END_SRC

    It can be executed in Spacemacs with ~<SPC> m b e~! In particular, that
    block generates this when run:
    
    #+BEGIN_EXAMPLE
    #+RESULTS:
    | Hello,   | world!      |    |      |              |
    | Literate | programming | is | very | interesting. |
    #+END_EXAMPLE

    
** Chapter 1

   This chapter is primarily a history lesson and doesn't contain many useful
   code examples. Very interesting, but not useful for this reference.
   
** Chapter 2

*** Who

    The who command prints out information about the currently logged in
    user(s)! On a shared machine, I'd expect this to return many users

    #+BEGIN_SRC shell :tangle chapter2_who.sh
      who
    #+END_SRC

    #+RESULTS:
    : zacherydelong :1           2021-05-21 08:59 (:1)

    Even more useful, though, is a way to count the users logged into the
    system. Since ~who~ outputs one user per line, if we counted the number of
    lines, we could easily see how many users there are. The Unix program ~wc~
    can do many things, but when used with ~-l~ will only output the number of
    lines.

    To move the output of ~who~ into the input of ~wc -l~ we use a Unix pipe
    (~|~). 

    #+BEGIN_SRC shell :tangle chapter2_count_logged_in_users.sh
      who | wc -l
    #+END_SRC

    #+RESULTS:
    : 1

*** Making scripts run-able

    There is one more step in making files executable, and that's telling the
    interpreter how to run them. You can do this with a special metadata comment
    ~#!~. This comment (when followed by the path to a particular shell) will
    ensure that the correct shell runs your scripts. For most of my scripts I
    will use ~/bin/sh~ which is the path on my Linux systems to zsh, my
    preferred shell.

    It's worth noting that the system will usually have a default, so often you
    can get away without that line. That being said, it's a good best practice.
    Also, you can do all kinds of things this way. For example, you could make
    an ~awk~ shell script this way or even run python or some other shell
    scripting language.

*** Variables

    Variables at the shell can start with an underscore (_) or a letter. They
    may not contain symbols.

    If you want to create and assign a new variable, you can follow the name
    with an equal sign. To print that variable, use echo and precede the name
    with a ~$~.

    #+BEGIN_SRC shell :tangle chapter2_variables.sh
      my_number=4

      echo $my_number
    #+END_SRC

    #+RESULTS:
    : 4

    You can assign strings with or without quotes, but if the value has to
    contain spaces, you must use quotes.

    #+BEGIN_SRC shell :tangle chapter2_variables.sh
      my_string_without_spaces=hello

      my_greeting_with_spaces="hello, world!"

      echo $my_string_without_spaces
      echo $my_greeting_with_spaces
    #+END_SRC

    #+RESULTS:
    | hello |        |
    | hello | world! |

    There is also some basic string interpolation across strings, which is
    pretty neat in such an old language.

    #+BEGIN_SRC shell :tangle chapter2_variables.sh
      first_name=Zachery
      middle_name=Paul
      last_name=DeLong

      full_name="$last_name, $first_name $middle_name"

      echo $full_name
    #+END_SRC

    #+RESULTS:
    | DeLong | Zachery Paul |

**** A note about echo

     One cool thing about ~echo~ is the ~-n~ option that can stop echo from
     printing a newline. This is handy for taking input on the same line as the
     prompt, but not all systems support it. Fortunately, PopOS (my current
     operating system) does package a version of ~echo~ that has it!

**** printf

     In part because of the lack of standardization mentioned above, it's
     usually a good idea to use the ~printf~ command when your output is more
     complex. In the simplest case, it's pretty easy to use.

     #+BEGIN_SRC shell :tangle chapter2_variables.sh
       printf "Hello, world, from printf!\n"
     #+END_SRC

     Note the manually added newline! The real power of ~printf~ comes from
     formatting strings.

     #+BEGIN_SRC shell :tangle chapter2_variables.sh
       printf "%s, %s" hello world
     #+END_SRC

     #+RESULTS:
     | hello | world |

     
*** I/O Redirection

    You already know what standard input/output/error are, and redirection is
    how you get programs to use things other than the standard terminal to
    handle those things. You can use ~<~ to change standard input, and you can
    use ~>~ to change standard output.

    Normally echo works on standard output (the terminal) but you can redirect
    it to a file.
    #+BEGIN_SRC shell :tangle chapter2_io_redirection.sh
      echo "This is interesting" > output.txt

      cat output.txt

      rm output.txt 
    #+END_SRC

    #+RESULTS:
    : This is interesting

    Note that writing to a file with output redirection (~>~) will overwrite the
    file if it exists. To append instead, use ~>>~.

*** Pipelines (pipes)

    When working with output your have two options in most cases.
    + Write your output to a temporary file and read it in the next program
    + Pipe the output of one program as input to another program

    In general, pipes are much faster than file operations, so they should often
    be preferred (depending on context of course). We have already used an
    example of pipes in one of our first programs [[*Who][our user count]]!

    
*** TR

    The TR command can be used to do transliteration. It takes a list of
    characters to operate on and an input.

    #+BEGIN_SRC shell :tangle chapter2_tr.sh
      file_name="file.txt"

      echo "this will be upper cased" > $file_name

      cat $file_name

      # Notice the quotes! Apparently this version requires them
      cat $file_name | tr "[:lower:]" "[:upper:]"

      rm $file_name
    #+END_SRC

    #+RESULTS:
    | this | will | be | upper | cased |
    | THIS | WILL | BE | UPPER | CASED |

    You can also use it to delete characters

    #+BEGIN_SRC shell :tangle chapter2_tr.sh
      file_name="file.txt"

      echo "thibs habbbbs abbbb lbot of jbbbunk in ibbbt." > $file_name

      cat $file_name
      cat $file_name | tr -d "b"

      rm $file_name
    #+END_SRC

    #+RESULTS:
    | thibs | habbbbs | abbbb | lbot | of | jbbbunk | in | ibbbt. |
    | this  | has     | a     | lot  | of | junk    | in | it.    |


    It can do a lot of other neat stuff, too.

*** Turning off output

    It can be useful (especially when asking for passwords) to turn off
    repeating what the user types in the terminal. To do that, run ~stty -echo~
    and to turn it back on again ~stty echo~

    This can be particularly useful when combined with ~read~.

*** Script arguments

    You can get to shell script parameters using ~$number~ and if you need to go
    above 9, you have to surround the number in curly braces.

    #+BEGIN_SRC shell :tangle chapter2_args.sh
      echo "Arg 1 is $1"
      echo "Arg 11 is ${11}"
    #+END_SRC
    
*** Grep
    
    Grep parses input for lines that match a specific pattern
    
**** Looking for a particular user

     If you wanted to use a script to find a specific logged in user on your
     machine, you could write something like

     #+BEGIN_SRC shell :tangle chapter2_grep.sh
       who | grep $1
     #+END_SRC

*** Execution tracing

    To debug, you can use ~sh -x [script]~ You can also use ~set -x~ and ~set
    +x~ to turn tracing on and off (respectively) within a script.

** Chapter 3

*** Quotes in bash
   
   Quick aside about quotes in zsh... You can't embed a single quote inside a
   quoted text. Even escaping it doesn't work for some (I'm sure legacy) reason.
   So in order to get a single quote inside the character set here, I have to
   end the single quote text ~'~ , input an escaped single quote ~\'~ and then
   put a new single quote to continue the string ~'~. So put together, it's
   ~'\''~. This makes no sense, but it is what it is.

   Thankfully, the same is not true of double quotes. Notice in the following
   example that the ~echo~ line is using double quotes and escaping the internal
   double quotes, but the regular expression (which is looking for items that
   have a single or double quote in the line) is doing this crazy single-quote
   escaping.
   
   #+BEGIN_SRC shell
     echo "'foo'\nbar\n\"asdf\"" | grep '\(['\''"]\)' 
   #+END_SRC

   #+RESULTS:
   | 'foo' |
   | asdf  |

*** Backreferences
    
    A backreference is a way to refer to something in a previous capture group
    in your pattern. For example, if I wanted to match lines that contained
    words (or groups of words) enclosed in either a double or a single quote, I
    would do something like this:

   #+BEGIN_SRC shell
     echo "'foo'\nbar\n\"asdf\"\n'one\n\"two'" | grep "\(['\"]\).\+\1"
   #+END_SRC

   #+RESULTS:
   | 'foo' |
   | asdf  |

   Notice that the first step is to match either a single or double quote in the
   first capture group. Then, we match any string of characters (including
   whitespace) of at least one or more, followed by "whatever was matched in the
   first capture group."

   Notice that it isn't "whatever capture class was in that group." If we had
   matched on ~[:alpha:]~ text substituted for ~\1~ would have been the _exact
   text_ from the previous capture group, *not* the character class. This is why
   the text does not match a line that starts with a single quote and ends with
   a double quote, for example.

*** Matching many characters at once

    So far, we have mostly used ~.~ and ~\+~ or ~*~ to match multiple
    characters, but there are tons of ways to match more specifically.

**** BREs

     BREs have a rather odd syntax for matching specific classes.

     #+BEGIN_SRC shell 
       echo "lowercase text\nUPPERCASE TEXT" | grep "[[:upper:]]"
     #+END_SRC

     #+RESULTS:
     : UPPERCASE TEXT

     There are other classes for:
     - lower
     - digit
     - and many others!

     That said, the most interesting things that you can do with regular
     expressions is match more than just a single character in that class.
     Usually, I'll do this using either ~*~ (match zero or more) or ~\+~ (match
     one or more).
     
**** ERE

     EREs have the more modern (Perl style?) syntax for equivalence classes.
     some of my favorites are:

     - ~\d~ :: Matches digits
     - ~\s~ :: Matches whitespace
     - ~\w~ :: Matches "word" characters

     And many of these can be capitalized to mean "Not x" so ~\S~ means "non
     whitespace".
     
     Matching repeating characters/classes works similarly to BREs: ~*~ still
     matches "zero or more" but ~+~ matches "one or more" (no backslash).
