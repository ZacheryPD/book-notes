* Classic Shell Scripting

** Housekeeping

*** What is this project?

    This project is my attempt to document my notes as I read through the book
    Classic Shell Scripting. This book attempts to guide the reader through
    common shell scripting tasks in Bash. I thought the examples (and some of my
    own prototypes) would be good candidates for literate programming.

*** Literate programming

    Literate programming is a technique where you invert the priority of code
    and comments, writing primarily documentation explaining your thought
    process with code examples interspersed which can be combined in some way to
    produce the actual code you want. Org mode has some ability to do that
    native and I am going to use that functionality. 

    For example, if I add a script below:
    #+BEGIN_SRC shell :tangle preface.sh
      echo "Hello, world!"
      echo "Literate programming is very interesting."
    #+END_SRC

    It can be executed in Spacemacs with ~<SPC> m b e~! In particular, that
    block generates this when run:
    
    #+BEGIN_EXAMPLE
    #+RESULTS:
    | Hello,   | world!      |    |      |              |
    | Literate | programming | is | very | interesting. |
    #+END_EXAMPLE

    
** Chapter 1

   This chapter is primarily a history lesson and doesn't contain many useful
   code examples. Very interesting, but not useful for this reference.
   
** Chapter 2

*** Who

    The who command prints out information about the currently logged in
    user(s)! On a shared machine, I'd expect this to return many users

    #+BEGIN_SRC shell :tangle chapter2_who.sh
      who
    #+END_SRC

    #+RESULTS:
    : zacherydelong :1           2021-05-21 08:59 (:1)

    Even more useful, though, is a way to count the users logged into the
    system. Since ~who~ outputs one user per line, if we counted the number of
    lines, we could easily see how many users there are. The Unix program ~wc~
    can do many things, but when used with ~-l~ will only output the number of
    lines.

    To move the output of ~who~ into the input of ~wc -l~ we use a Unix pipe
    (~|~). 

    #+BEGIN_SRC shell :tangle chapter2_count_logged_in_users.sh
      who | wc -l
    #+END_SRC

    #+RESULTS:
    : 1

*** Making scripts run-able

    There is one more step in making files executable, and that's telling the
    interpreter how to run them. You can do this with a special metadata comment
    ~#!~. This comment (when followed by the path to a particular shell) will
    ensure that the correct shell runs your scripts. For most of my scripts I
    will use ~/bin/sh~ which is the path on my Linux systems to zsh, my
    preferred shell.

    It's worth noting that the system will usually have a default, so often you
    can get away without that line. That being said, it's a good best practice.
    Also, you can do all kinds of things this way. For example, you could make
    an ~awk~ shell script this way or even run python or some other shell
    scripting language.
